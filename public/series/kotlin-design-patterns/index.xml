<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kotlin Design Patterns on Adam Coding Corner</title>
    <link>//localhost:1313/series/kotlin-design-patterns/</link>
    <description>Recent content in Kotlin Design Patterns on Adam Coding Corner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Aug 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/series/kotlin-design-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Command Pattern in Kotlin</title>
      <link>//localhost:1313/kotlin-command-pattern/</link>
      <pubDate>Sun, 22 Aug 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/kotlin-command-pattern/</guid>
      <description>The Command pattern wraps the request into a specific object that has all the information necessary to perform its task. You can think of it as the next stage of refactoring, where at first we extract the code to a separate method, and then to a separate object, taking the arguments needed to execute the request in the constructor.</description>
    </item>
    <item>
      <title>Mediator in Kotlin</title>
      <link>//localhost:1313/kotlin_mediator_pattern/</link>
      <pubDate>Sat, 17 Jul 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/kotlin_mediator_pattern/</guid>
      <description>The Mediator&amp;rsquo;s job is to organize communication between close classes. The &lt;code&gt;Mediator&lt;/code&gt; pattern cuts out dependencies between components. It takes over the interaction between them, becoming the main communication hub for a group of classes. There is a reverse of the controls because components are now just telling &amp;lsquo;what happened&amp;rsquo; instead of telling others to &amp;lsquo;do something&amp;rsquo;. It can be found e.g. in the form of &lt;code&gt;ViewModel&lt;/code&gt; in Android, where it separates UI interactions from data model changes.</description>
    </item>
    <item>
      <title>Decorator Pattern in Kotlin</title>
      <link>//localhost:1313/kotlin-decorator-pattern/</link>
      <pubDate>Sat, 03 Jul 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/kotlin-decorator-pattern/</guid>
      <description>The &lt;code&gt;Decorator&lt;/code&gt; pattern is used where creating separate classes which are a combination of all possibilities would result in their explosion. This pattern focuses on creating object layers to transparently and dynamically complement objects with new tasks. The decorator provides an object with the same interface as the decorated object.</description>
    </item>
    <item>
      <title>Adapter Pattern in Kotlin</title>
      <link>//localhost:1313/kotlin-adapter-pattern/</link>
      <pubDate>Sat, 26 Jun 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/kotlin-adapter-pattern/</guid>
      <description>The Adapter or Wrapper Pattern allows you to &lt;code&gt;translate&lt;/code&gt; one interface into another, expected by the client class. It is especially useful when the adapted object comes from 3rd party library, and you do not want to make your system depending on that interface, creating the so-called &lt;code&gt;anticorruption layer&lt;/code&gt;. Adaptee interface changes will only affect the &lt;code&gt;Adapter&lt;/code&gt; and not the rest of the code.</description>
    </item>
    <item>
      <title>Facade Pattern in Kotlin</title>
      <link>//localhost:1313/kotlin-facade-pattern/</link>
      <pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/kotlin-facade-pattern/</guid>
      <description>The facade allows you to hide the details of the module from clients. It ensures compliance with &lt;code&gt;Law Demeter&lt;/code&gt;. Using the generic interface and various implementations greatly simplifies testing. It blends well with other patterns like &lt;code&gt;Strategy&lt;/code&gt;,&lt;code&gt; Template Method&lt;/code&gt;, or construction patterns, allowing configuration of the object available for the clients. The facade is a good entry point for libraries, giving customers access to high-level functionality and hiding all internal logic and classes.</description>
    </item>
    <item>
      <title>Strategy Pattern in Kotlin</title>
      <link>//localhost:1313/kotlin-strategy-pattern/</link>
      <pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/kotlin-strategy-pattern/</guid>
      <description>The &lt;code&gt;Strategy&lt;/code&gt; pattern creates a family of algorithms, enclosing the differing logic in separate classes while hiding it from clients behind the interface. It enables the interchangeable use of implementations. The use of the strategy simplifies the customer code, avoids code duplication and conditional statements. Significantly simplifies testing - by separating client testing from strategy algorithms.</description>
    </item>
    <item>
      <title>Kotlin Template Method</title>
      <link>//localhost:1313/kotlin-template-method/</link>
      <pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/kotlin-template-method/</guid>
      <description>The template method is a very simple design pattern, that separates shared class parts from changing ones. The core idea is to have an abstract parent class containing the algorithm steps and allowing inheriting classes to overwrite individual steps, but not the algorithm that uses those steps itself.</description>
    </item>
    <item>
      <title>Kotlin Abstract Factory</title>
      <link>//localhost:1313/kotlin-abstract-factory/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/kotlin-abstract-factory/</guid>
      <description>The factory of factories, &amp;lsquo;Abstract Factory&amp;rsquo; makes creating objects that are part of some &amp;lsquo;family&amp;rsquo; easy. It is another layer over concrete factories delivering client the factory instance for creating objects of a certain variant.</description>
    </item>
    <item>
      <title>Kotlin Factory Method</title>
      <link>//localhost:1313/kotlin-factory-method/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/kotlin-factory-method/</guid>
      <description>After the &lt;code&gt;Static Factory Method&lt;/code&gt; it&amp;rsquo;s time for classic &lt;code&gt;Factory&lt;/code&gt;. Factory is very useful and often used construction design pattern. Kotlin has interesting advantage thanks to &lt;code&gt;sealed&lt;/code&gt; and &lt;code&gt;internal&lt;/code&gt; classes, that are missing in Java.</description>
    </item>
    <item>
      <title>Kotlin Static Factory Methods</title>
      <link>//localhost:1313/kotlin-static-factory-methods/</link>
      <pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/kotlin-static-factory-methods/</guid>
      <description>&lt;code&gt;Static Factory Methods&lt;/code&gt; known from Java have their place also in Kotlin, although they look and behave a bit different because there is no &lt;code&gt;static&lt;/code&gt; word in Kotlin. Here I&amp;rsquo;ll try to show how to use &lt;code&gt;companion object&lt;/code&gt; for &lt;code&gt;Static Factory Methods&lt;/code&gt; and more. PS: This whole post was supposed to be about &lt;code&gt;Factory Method&lt;/code&gt; with just a short mention about static factory methods, but the topic becomes more interesting than I thought :)</description>
    </item>
    <item>
      <title>Kotlin Builder Pattern</title>
      <link>//localhost:1313/kotlin-builder-pattern/</link>
      <pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/kotlin-builder-pattern/</guid>
      <description>The Builder Design Pattern is one of most popular and useful construction patterns in software engineering. In this post I will try to explain it and show how you can use it with Kotlin. Sadly I often see implementations that are simple translation from Java rather that utilizing cool Kotlin syntactic sugar.</description>
    </item>
  </channel>
</rss>
