<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Construction Design Pattern on Adam Coding Corner</title>
    <link>//localhost:1313/tags/construction-design-pattern/</link>
    <description>Recent content in Construction Design Pattern on Adam Coding Corner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Mar 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/tags/construction-design-pattern/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kotlin Abstract Factory</title>
      <link>//localhost:1313/kotlin-abstract-factory/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/kotlin-abstract-factory/</guid>
      <description>The factory of factories, &amp;lsquo;Abstract Factory&amp;rsquo; makes creating objects that are part of some &amp;lsquo;family&amp;rsquo; easy. It is another layer over concrete factories delivering client the factory instance for creating objects of a certain variant.</description>
    </item>
    <item>
      <title>Kotlin Factory Method</title>
      <link>//localhost:1313/kotlin-factory-method/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/kotlin-factory-method/</guid>
      <description>After the &lt;code&gt;Static Factory Method&lt;/code&gt; it&amp;rsquo;s time for classic &lt;code&gt;Factory&lt;/code&gt;. Factory is very useful and often used construction design pattern. Kotlin has interesting advantage thanks to &lt;code&gt;sealed&lt;/code&gt; and &lt;code&gt;internal&lt;/code&gt; classes, that are missing in Java.</description>
    </item>
    <item>
      <title>Kotlin Static Factory Methods</title>
      <link>//localhost:1313/kotlin-static-factory-methods/</link>
      <pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/kotlin-static-factory-methods/</guid>
      <description>&lt;code&gt;Static Factory Methods&lt;/code&gt; known from Java have their place also in Kotlin, although they look and behave a bit different because there is no &lt;code&gt;static&lt;/code&gt; word in Kotlin. Here I&amp;rsquo;ll try to show how to use &lt;code&gt;companion object&lt;/code&gt; for &lt;code&gt;Static Factory Methods&lt;/code&gt; and more. PS: This whole post was supposed to be about &lt;code&gt;Factory Method&lt;/code&gt; with just a short mention about static factory methods, but the topic becomes more interesting than I thought :)</description>
    </item>
    <item>
      <title>Kotlin Builder Pattern</title>
      <link>//localhost:1313/kotlin-builder-pattern/</link>
      <pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/kotlin-builder-pattern/</guid>
      <description>The Builder Design Pattern is one of most popular and useful construction patterns in software engineering. In this post I will try to explain it and show how you can use it with Kotlin. Sadly I often see implementations that are simple translation from Java rather that utilizing cool Kotlin syntactic sugar.</description>
    </item>
  </channel>
</rss>
