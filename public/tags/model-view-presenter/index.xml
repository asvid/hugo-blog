<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Model-View-Presenter on My New Hugo Site</title>
    <link>http://localhost:1313/tags/model-view-presenter/</link>
    <description>Recent content in Model-View-Presenter on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/model-view-presenter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Android Presentation Patterns: MVP</title>
      <link>http://localhost:1313/2024-01-29-MVP/</link>
      <pubDate>Sun, 04 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024-01-29-MVP/</guid>
      <description>But MVC does the job! When examining the MVC pattern as described here, it&amp;rsquo;s evident that the direct relationship between the View and Controller is problematic. Tight coupling results in challenging testing, where changes in one class necessitate updates in another, and it doesn&amp;rsquo;t scale well. In complex views, there can be multiple conditions for setting values in UI elements, depending on the current state of the UI and responses from the Model.</description>
    </item>
  </channel>
</rss>
