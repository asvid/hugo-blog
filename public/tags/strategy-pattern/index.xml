<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Strategy Pattern on My New Hugo Site</title>
    <link>http://localhost:1313/tags/strategy-pattern/</link>
    <description>Recent content in Strategy Pattern on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 May 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/strategy-pattern/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Strategy Pattern in Kotlin</title>
      <link>http://localhost:1313/kotlin-strategy-pattern/</link>
      <pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/kotlin-strategy-pattern/</guid>
      <description>Purpose The Strategy design pattern defines a family of algorithms and allows them to be used interchangeably. By algorithm, here I mean any logic, be it sorting, searching, or computing some value from data. It does not matter. It is, in a sense, an extension of the Template Method pattern, but inversely to it, Strategy prefers composition over inheritance. Strategies do not inherit from any specific class but only implement a common interface.</description>
    </item>
  </channel>
</rss>
