<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on My New Hugo Site</title>
    <link>http://localhost:1313/categories/programming/</link>
    <description>Recent content in Programming on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Apr 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dlaczego warto korzystać z Tech proposals</title>
      <link>http://localhost:1313/tech_proposals/</link>
      <pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tech_proposals/</guid>
      <description>&amp;ldquo;Dokumentacja po-projektowa&amp;rdquo; Jak to złośliwie nazywali wykładowcy, sprawdzając uniwersyteckie projekty na zaliczenie, których założeniem było zaplanować projekt i udokumentować plan, a następnie go zaimplementować. W praktyce pisało się, byleby działało, a następnie dokumentowało twór. I niech pierwszy rzuci kamieniem kto tak nie robił :)&#xA;Wykładowcy to często starsi ludzie bez doświadczenia komercyjnego, przyzwyczajeni do watter-fall&amp;rsquo;owego planowania projektów. Teraz mamy Agile, ciągłe dowożenie feature&amp;rsquo;ów, samodokumentujący się kod i inne pomoce.&#xA;Czy dzisiaj jest jeszcze potrzeba pisania planu przed faktyczną implementacją, czy jest to relikt przeszłości, sztuka dla sztuki i uniwersytecka fanaberia?</description>
    </item>
  </channel>
</rss>
