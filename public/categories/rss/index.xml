<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rss on My New Hugo Site</title>
    <link>http://localhost:1313/categories/rss/</link>
    <description>Recent content in Rss on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/rss/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Android Presentation Patterns: MVI</title>
      <link>http://localhost:1313/2024-02-24-MVI/</link>
      <pubDate>Sat, 24 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024-02-24-MVI/</guid>
      <description>MVI isn&amp;rsquo;t a single ready-to-implement pattern; it&amp;rsquo;s more of a spectrum. This post delves into its diverse range, from basic MVVM patterns to intricate Redux-like state management, emphasizing the importance of grasping its principles for effective implementation tailored to specific project needs.</description>
    </item>
    <item>
      <title>Android Presentation Patterns: MVVM</title>
      <link>http://localhost:1313/2024-02-09-MVVM/</link>
      <pubDate>Fri, 09 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024-02-09-MVVM/</guid>
      <description>MVVM architecture promotes a clean separation of concerns, making it easier to develop and maintain complex Android applications. By adhering to the key principles and components of MVVM, developers can create scalable, testable, and maintainable apps that provide a seamless user experience.</description>
    </item>
    <item>
      <title>Android Presentation Patterns: MVP</title>
      <link>http://localhost:1313/2024-01-29-MVP/</link>
      <pubDate>Sun, 04 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024-01-29-MVP/</guid>
      <description>Uncover the journey of evolution from MVC to MVP, tackling challenges through the integration of a Presenter and well-defined contracts. Despite the advantages MVP offers, it necessitates addressing common concerns such as boilerplate code and potential intricacies for more straightforward UIs.</description>
    </item>
    <item>
      <title>Android Presentation Patterns: MVC</title>
      <link>http://localhost:1313/2024-01-27-MVC/</link>
      <pubDate>Sat, 27 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024-01-27-MVC/</guid>
      <description>Explore the early days of Android with the Model-View-Controller (MVC) pattern. Discover its challenges, like tight connections and testing troubles, through a simple example. While acknowledging its history, the article introduces modern alternatives like Model-View-Presenter (MVP), Model-View-ViewModel (MVVM), and Redux, explaining why they&amp;rsquo;re better choices for today&amp;rsquo;s Android app setup.</description>
    </item>
    <item>
      <title>Continuous Integration and Deployment: A Developer&#39;s Best Friends</title>
      <link>http://localhost:1313/2023-06-16-ci-is-your-friend/</link>
      <pubDate>Fri, 16 Jun 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2023-06-16-ci-is-your-friend/</guid>
      <description>Embrace the power of Continuous Integration and Deployment (CI/CD) in software development. Automate tests, streamline workflows, and boost collaboration with user-friendly services like CircleCI, Bitrise, GitLab, and GitHub Actions. Level up your development process today!</description>
    </item>
    <item>
      <title>Would you go for mobile development again, after 10 years of doing it?</title>
      <link>http://localhost:1313/would-i-do-mobile-again/</link>
      <pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/would-i-do-mobile-again/</guid>
      <description>I went to a meetup in my city last week and a guy I just met there popped a question after a while of conversation: with my experience, would I go for mobile software development again or pick a different area?</description>
    </item>
    <item>
      <title>Why should you use Tech proposals</title>
      <link>http://localhost:1313/tech_proposals/</link>
      <pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tech_proposals/</guid>
      <description>Tech Proposal are a less formal way for internal documentation created before actual implementation. They also facilitate making technical decisions.</description>
    </item>
    <item>
      <title>Android service binding fix for API 30</title>
      <link>http://localhost:1313/2021-09-03-android-service-binding-on-api30/</link>
      <pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2021-09-03-android-service-binding-on-api30/</guid>
      <description>Android 11 (API 30) changes the way of using external app services. Using &lt;code&gt;compileSdk 30&lt;/code&gt; and above, without additional Manifest entry the &lt;code&gt;bindService()&lt;/code&gt; method will always return &lt;code&gt;False&lt;/code&gt;, even if with &lt;code&gt;compileSdk 29&lt;/code&gt; the app will work perfectly. I want to share solution of this problem after WAY TOO LONG time I spent on searching it&amp;hellip;</description>
    </item>
    <item>
      <title>Command Pattern in Kotlin</title>
      <link>http://localhost:1313/kotlin-command-pattern/</link>
      <pubDate>Sun, 22 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/kotlin-command-pattern/</guid>
      <description>The Command pattern wraps the request into a specific object that has all the information necessary to perform its task. You can think of it as the next stage of refactoring, where at first we extract the code to a separate method, and then to a separate object, taking the arguments needed to execute the request in the constructor.</description>
    </item>
    <item>
      <title>Remote Logger</title>
      <link>http://localhost:1313/remote-logger/</link>
      <pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/remote-logger/</guid>
      <description>While working on a project, I couldn&amp;rsquo;t use Android&amp;rsquo;s &amp;lsquo;Development Options&amp;rsquo; - I couldn&amp;rsquo;t access the logs. If only you could send Logcat logs, e.g. via WebSocket, and then catch them on your computer&amp;hellip; I did not find such a tool, so I wrote one and described the process in this post.</description>
    </item>
    <item>
      <title>Mediator in Kotlin</title>
      <link>http://localhost:1313/kotlin_mediator_pattern/</link>
      <pubDate>Sat, 17 Jul 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/kotlin_mediator_pattern/</guid>
      <description>The Mediator&amp;rsquo;s job is to organize communication between close classes. The &lt;code&gt;Mediator&lt;/code&gt; pattern cuts out dependencies between components. It takes over the interaction between them, becoming the main communication hub for a group of classes. There is a reverse of the controls because components are now just telling &amp;lsquo;what happened&amp;rsquo; instead of telling others to &amp;lsquo;do something&amp;rsquo;. It can be found e.g. in the form of &lt;code&gt;ViewModel&lt;/code&gt; in Android, where it separates UI interactions from data model changes.</description>
    </item>
    <item>
      <title>Decorator Pattern in Kotlin</title>
      <link>http://localhost:1313/kotlin-decorator-pattern/</link>
      <pubDate>Sat, 03 Jul 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/kotlin-decorator-pattern/</guid>
      <description>The &lt;code&gt;Decorator&lt;/code&gt; pattern is used where creating separate classes which are a combination of all possibilities would result in their explosion. This pattern focuses on creating object layers to transparently and dynamically complement objects with new tasks. The decorator provides an object with the same interface as the decorated object.</description>
    </item>
    <item>
      <title>Adapter Pattern in Kotlin</title>
      <link>http://localhost:1313/kotlin-adapter-pattern/</link>
      <pubDate>Sat, 26 Jun 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/kotlin-adapter-pattern/</guid>
      <description>The Adapter or Wrapper Pattern allows you to &lt;code&gt;translate&lt;/code&gt; one interface into another, expected by the client class. It is especially useful when the adapted object comes from 3rd party library, and you do not want to make your system depending on that interface, creating the so-called &lt;code&gt;anticorruption layer&lt;/code&gt;. Adaptee interface changes will only affect the &lt;code&gt;Adapter&lt;/code&gt; and not the rest of the code.</description>
    </item>
    <item>
      <title>IntelliJ IDEA as a LaTeX editor</title>
      <link>http://localhost:1313/intellij-latex-editor/</link>
      <pubDate>Mon, 21 Jun 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/intellij-latex-editor/</guid>
      <description>IntelliJ IDEA is pretty good at handling LaTeX. I dare say that it is an even better experience than TexStudio or Texmaker, which are dedicated to this type of project. However, the strength of IntelliJ is not in its out-of-the-box capabilities, but plugins and manual configuration of the build process.</description>
    </item>
    <item>
      <title>Facade Pattern in Kotlin</title>
      <link>http://localhost:1313/kotlin-facade-pattern/</link>
      <pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/kotlin-facade-pattern/</guid>
      <description>The facade allows you to hide the details of the module from clients. It ensures compliance with &lt;code&gt;Law Demeter&lt;/code&gt;. Using the generic interface and various implementations greatly simplifies testing. It blends well with other patterns like &lt;code&gt;Strategy&lt;/code&gt;,&lt;code&gt; Template Method&lt;/code&gt;, or construction patterns, allowing configuration of the object available for the clients. The facade is a good entry point for libraries, giving customers access to high-level functionality and hiding all internal logic and classes.</description>
    </item>
    <item>
      <title>Strategy Pattern in Kotlin</title>
      <link>http://localhost:1313/kotlin-strategy-pattern/</link>
      <pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/kotlin-strategy-pattern/</guid>
      <description>The &lt;code&gt;Strategy&lt;/code&gt; pattern creates a family of algorithms, enclosing the differing logic in separate classes while hiding it from clients behind the interface. It enables the interchangeable use of implementations. The use of the strategy simplifies the customer code, avoids code duplication and conditional statements. Significantly simplifies testing - by separating client testing from strategy algorithms.</description>
    </item>
    <item>
      <title>Kotlin Template Method</title>
      <link>http://localhost:1313/kotlin-template-method/</link>
      <pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/kotlin-template-method/</guid>
      <description>The template method is a very simple design pattern, that separates shared class parts from changing ones. The core idea is to have an abstract parent class containing the algorithm steps and allowing inheriting classes to overwrite individual steps, but not the algorithm that uses those steps itself.</description>
    </item>
    <item>
      <title>Kotlin Abstract Factory</title>
      <link>http://localhost:1313/kotlin-abstract-factory/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/kotlin-abstract-factory/</guid>
      <description>The factory of factories, &amp;lsquo;Abstract Factory&amp;rsquo; makes creating objects that are part of some &amp;lsquo;family&amp;rsquo; easy. It is another layer over concrete factories delivering client the factory instance for creating objects of a certain variant.</description>
    </item>
    <item>
      <title>Kotlin Factory Method</title>
      <link>http://localhost:1313/kotlin-factory-method/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/kotlin-factory-method/</guid>
      <description>After the &lt;code&gt;Static Factory Method&lt;/code&gt; it&amp;rsquo;s time for classic &lt;code&gt;Factory&lt;/code&gt;. Factory is very useful and often used construction design pattern. Kotlin has interesting advantage thanks to &lt;code&gt;sealed&lt;/code&gt; and &lt;code&gt;internal&lt;/code&gt; classes, that are missing in Java.</description>
    </item>
    <item>
      <title>Kotlin Static Factory Methods</title>
      <link>http://localhost:1313/kotlin-static-factory-methods/</link>
      <pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/kotlin-static-factory-methods/</guid>
      <description>&lt;code&gt;Static Factory Methods&lt;/code&gt; known from Java have their place also in Kotlin, although they look and behave a bit different because there is no &lt;code&gt;static&lt;/code&gt; word in Kotlin. Here I&amp;rsquo;ll try to show how to use &lt;code&gt;companion object&lt;/code&gt; for &lt;code&gt;Static Factory Methods&lt;/code&gt; and more. PS: This whole post was supposed to be about &lt;code&gt;Factory Method&lt;/code&gt; with just a short mention about static factory methods, but the topic becomes more interesting than I thought :)</description>
    </item>
    <item>
      <title>Kotlin Builder Pattern</title>
      <link>http://localhost:1313/kotlin-builder-pattern/</link>
      <pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/kotlin-builder-pattern/</guid>
      <description>The Builder Design Pattern is one of most popular and useful construction patterns in software engineering. In this post I will try to explain it and show how you can use it with Kotlin. Sadly I often see implementations that are simple translation from Java rather that utilizing cool Kotlin syntactic sugar.</description>
    </item>
    <item>
      <title>Code Review Retro</title>
      <link>http://localhost:1313/code-review-retro/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/code-review-retro/</guid>
      <description>Importance of Code Review I sure do hope that I don&amp;rsquo;t need to convince anyone how important is the process of code review. If you need some guidelines on how to do it well I can recommend this Yelp blog post Here I&amp;rsquo;d just like to perform a retrospective of my own code review experiences.&#xA;A bit of history When I started my developer career in a rather small company - we were not doing code reviews.</description>
    </item>
    <item>
      <title>Ultimate Github Page Deployment</title>
      <link>http://localhost:1313/github-page-deployment/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/github-page-deployment/</guid>
      <description>Mr Hyde Text you are reading is available on Jekyll blog hosted on GitHub, with the use of free Github Pages. Long story short: Jekyll is a template engine changing markdown documents on static HTML webpages, that you can then host anywyere, because you don&amp;rsquo;t need databases or server that has PHP or Python.&#xA;Usual process Normally process of adding new post looks like this:&#xA;I write markdown document with setting parameters like title, date and tags when I&amp;rsquo;m happy with what I wrote (never), I commit changes and push it to repository on GitHub.</description>
    </item>
    <item>
      <title>IntelliJ settings repo</title>
      <link>http://localhost:1313/intellij-settings-repo/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/intellij-settings-repo/</guid>
      <description>My setup looks like this: I have Windows PC with Linux installed on a separate drive, also I have 2 MacBooks for work, and rarely used Linux ThinkPad. Keeping my IntelliJ settings in sync at all of those machines wasn&amp;rsquo;t really possible. If I find some setting that improves my workflow at my office machine, and after some time I want to work on a pet project on my own PC - I get this itch of not having this setting I had on MacBook&amp;hellip; so I can export my settings and then import it.</description>
    </item>
    <item>
      <title>Shell script basics</title>
      <link>http://localhost:1313/shellscriptbasics/</link>
      <pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/shellscriptbasics/</guid>
      <description>Why Recently I had to do some tasks that required me to fallowing a strict checklist. It wasn&amp;rsquo;t anything complex, no creativity required - just do as list tells you to do. I was also one of the creators of the checklist.&#xA;I had to do it a few times, almost regularly, sometimes in short notice but nothing extreme.&#xA;So obviously I made errors because I knew the checklist so well I wasn&amp;rsquo;t paying attention.</description>
    </item>
    <item>
      <title>Overlibrarization</title>
      <link>http://localhost:1313/overlibrarization/</link>
      <pubDate>Sun, 20 Jan 2019 18:57:02 +0000</pubDate>
      <guid>http://localhost:1313/overlibrarization/</guid>
      <description>It seems great Write code once use it many times. Creating smaller pieces of code forces developers to write encapsulated software that follows single responsibility principle and is easy to test. Such code piece (AKA module) can be then published as a versioned artifact - a private library, that can be reused in more than one project. We are getting quality and reusability, how cool is that! Well that&amp;rsquo;s the theory.</description>
    </item>
    <item>
      <title>Android build hacks #3 - documentation with Dokka</title>
      <link>http://localhost:1313/android-build-hacks-3-documentation/</link>
      <pubDate>Mon, 05 Nov 2018 20:05:58 +0000</pubDate>
      <guid>http://localhost:1313/android-build-hacks-3-documentation/</guid>
      <description>This is third part in series of articles about Android build configuration, all parts will be linked right below.&#xA;[#1 Build basics]({% post_url 2018-07-23-android-build-hacks %})&#xA;[#2 Build time optimization]({% post_url 2018-09-16-android-build-hacks-2 %})&#xA;[#3 Documentation with Dokka]({% post_url 2018-11-05-android-build-hacks-3 %})&#xA;Homework Wait what? You&amp;rsquo;ve wrote beautiful self-documenting code and someone tells you to create DOCUMENTATION for it? It&amp;rsquo;s already there! Well named methods and variables, design patterns used. If anyone wants to know how it works, he just needs to read through it - well named method by well named method&amp;hellip;</description>
    </item>
    <item>
      <title>Android Build Hacks #2 - build time optimization</title>
      <link>http://localhost:1313/android-build-hacks-2/</link>
      <pubDate>Sun, 16 Sep 2018 10:36:34 +0000</pubDate>
      <guid>http://localhost:1313/android-build-hacks-2/</guid>
      <description>This is second part in series of articles about Android build configuration, all parts will be linked right below.&#xA;[#1 Build basics]({% post_url 2018-07-23-android-build-hacks %})&#xA;[#2 Build time optimization]({% post_url 2018-09-16-android-build-hacks-2 %})&#xA;Motivation Main reason I&amp;rsquo;ve been interested in build config tricks was to speed up development builds. As developer I&amp;rsquo;m building apps many times each day, often just to change one small thing and check if it works. Each second took of build time means a lot if you build often.</description>
    </item>
    <item>
      <title>Android Build Hacks #1 - build basics</title>
      <link>http://localhost:1313/android-build-hacks-1/</link>
      <pubDate>Mon, 23 Jul 2018 22:24:27 +0000</pubDate>
      <guid>http://localhost:1313/android-build-hacks-1/</guid>
      <description>This is first part in series of articles about Android build configuration, all parts will be linked right below.&#xA;[#1 Build basics]({% post_url 2018-07-23-android-build-hacks %})&#xA;[#2 Build time optimization]({% post_url 2018-09-16-android-build-hacks-2 %})&#xA;Build configuration! This is not the most exciting part of software engineering. Each technology, language, framework has it&amp;rsquo;s own rules so there are no universal patterns, Uncle Bob will not help us here. But just like this worker on left, tightening the screw of Empire State Building skeleton, developers should polish their builds - build config itself is not the application (like skeleton is not the building), but application is useless if you cannot build release version.</description>
    </item>
    <item>
      <title>Hacking Android app with Frida</title>
      <link>http://localhost:1313/android-frida-hacking/</link>
      <pubDate>Sat, 31 Mar 2018 17:43:37 +0000</pubDate>
      <guid>http://localhost:1313/android-frida-hacking/</guid>
      <description>Side image is of course Frida Kahlo auto portrait, besides her name she has no connection with topic&#xA;Motivation Lately I attended to Sekurak hacking party - it&amp;rsquo;s event organized by Sekurak where they show how easy is to hack stuff like IP cameras, routers, phones. I guess Sekurak is known mainly in Poland, but they are real professionals in area of security. During this event Michał Bentkowski was showing how easy it is to spy on Android app communication and also change app behavior using tool named Frida.</description>
    </item>
    <item>
      <title>Nyan your terminal</title>
      <link>http://localhost:1313/nyan-your-terminal/</link>
      <pubDate>Sun, 04 Mar 2018 08:23:03 +0000</pubDate>
      <guid>http://localhost:1313/nyan-your-terminal/</guid>
      <description>Disclaimer #1: I&amp;rsquo;m an Android developer, not sysadmin. I use terminal to help me with my workflow, not as my main tool, so please keep this in mind :)&#xA;Disclaimer #2: This is based on Linux (Ubuntu), but most stuff should work on OSX also.&#xA;Terminal? If you are a developer (and not a Windows peasant), you might had to use terminal for day to day stuff like installing node.js or python packages, or running scripts.</description>
    </item>
    <item>
      <title>Android local libraries with Maven</title>
      <link>http://localhost:1313/android-local-maven/</link>
      <pubDate>Sun, 21 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/android-local-maven/</guid>
      <description>Local Maven repository guide for working on private libraries along with projects that use them</description>
    </item>
    <item>
      <title>Color changing progress bar</title>
      <link>http://localhost:1313/color-changing-progress-bar/</link>
      <pubDate>Sun, 24 Apr 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/color-changing-progress-bar/</guid>
      <description>Simple guide to color changing progress bar</description>
    </item>
  </channel>
</rss>
